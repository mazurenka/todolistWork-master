[{"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\App.tsx":"1","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"2","D:\\programming\\ToDoListDimych\\todolist\\src\\api\\todolists-api.ts":"3","D:\\programming\\ToDoListDimych\\todolist\\src\\index.tsx":"4","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5","D:\\programming\\ToDoListDimych\\todolist\\src\\app\\app-reducer.ts":"6","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"7","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"8","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"9","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"10","D:\\programming\\ToDoListDimych\\todolist\\src\\reportWebVitals.ts":"11","D:\\programming\\ToDoListDimych\\todolist\\src\\utils\\error-utils.ts":"12","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\Login.tsx":"13","D:\\programming\\ToDoListDimych\\todolist\\src\\app\\store.ts":"14","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\auth-reducer.ts":"15","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"16","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts":"17","D:\\programming\\todolistWork-master\\src\\index.tsx":"18","D:\\programming\\todolistWork-master\\src\\features\\Login\\auth-reducer.ts":"19","D:\\programming\\todolistWork-master\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"20","D:\\programming\\todolistWork-master\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"21","D:\\programming\\todolistWork-master\\src\\api\\todolists-api.ts":"22"},{"size":2659,"mtime":1644313955855,"results":"23","hashOfConfig":"24"},{"size":952,"mtime":1641376917409,"results":"25","hashOfConfig":"24"},{"size":3192,"mtime":1644311669438,"results":"26","hashOfConfig":"24"},{"size":643,"mtime":1641376917191,"results":"27","hashOfConfig":"24"},{"size":1773,"mtime":1641376917550,"results":"28","hashOfConfig":"24"},{"size":2532,"mtime":1641991491589,"results":"29","hashOfConfig":"24"},{"size":4193,"mtime":1641376917534,"results":"30","hashOfConfig":"24"},{"size":1595,"mtime":1641376917378,"results":"31","hashOfConfig":"24"},{"size":4043,"mtime":1642009067896,"results":"32","hashOfConfig":"24"},{"size":5008,"mtime":1644312164339,"results":"33","hashOfConfig":"24"},{"size":425,"mtime":1641376917237,"results":"34","hashOfConfig":"24"},{"size":858,"mtime":1642004848634,"results":"35","hashOfConfig":"24"},{"size":3115,"mtime":1641663346089,"results":"36","hashOfConfig":"24"},{"size":1367,"mtime":1641982395595,"results":"37","hashOfConfig":"24"},{"size":1764,"mtime":1641999584104,"results":"38","hashOfConfig":"24"},{"size":1101,"mtime":1642004107589,"results":"39","hashOfConfig":"24"},{"size":5770,"mtime":1642009486799,"results":"40","hashOfConfig":"24"},{"size":643,"mtime":1644848669000,"results":"41","hashOfConfig":"42"},{"size":1710,"mtime":1644848669000,"results":"43","hashOfConfig":"42"},{"size":1735,"mtime":1644848669000,"results":"44","hashOfConfig":"42"},{"size":1067,"mtime":1644848669000,"results":"45","hashOfConfig":"42"},{"size":3074,"mtime":1644848669000,"results":"46","hashOfConfig":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"gxrur4",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"1v3ixos",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\programming\\ToDoListDimych\\todolist\\src\\app\\App.tsx",["102","103","104"],"D:\\programming\\ToDoListDimych\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\api\\todolists-api.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\index.tsx",[],["105","106"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["107","108","109"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\programming\\ToDoListDimych\\todolist\\src\\app\\app-reducer.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["110","111","112","113","114","115"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\programming\\ToDoListDimych\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",["116","117","118"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n",["119","120"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["121","122","123","124","125","126","127","128"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/Login'/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",["129"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\r\n",["130","131"],"D:\\programming\\ToDoListDimych\\todolist\\src\\reportWebVitals.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\utils\\error-utils.ts",[],["132","133"],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\Login.tsx",["134"],"import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate,} from \"react-router-dom\";\r\nimport {useFormik} from 'formik';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\programming\\ToDoListDimych\\todolist\\src\\app\\store.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\Login\\auth-reducer.ts",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\programming\\ToDoListDimych\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts",["135"],"D:\\programming\\todolistWork-master\\src\\index.tsx",[],["136","137"],"D:\\programming\\todolistWork-master\\src\\features\\Login\\auth-reducer.ts",[],"D:\\programming\\todolistWork-master\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["138","139","140"],"D:\\programming\\todolistWork-master\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\programming\\todolistWork-master\\src\\api\\todolists-api.ts",[],{"ruleId":"141","severity":1,"message":"142","line":10,"column":9,"nodeType":"143","messageId":"144","endLine":10,"endColumn":22},{"ruleId":"145","severity":1,"message":"146","line":27,"column":8,"nodeType":"147","endLine":27,"endColumn":10,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":31,"column":8,"nodeType":"147","endLine":31,"endColumn":10,"suggestions":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"145","severity":1,"message":"155","line":15,"column":97,"nodeType":"147","endLine":15,"endColumn":130,"suggestions":"156"},{"ruleId":"145","severity":1,"message":"155","line":20,"column":8,"nodeType":"147","endLine":20,"endColumn":41,"suggestions":"157"},{"ruleId":"145","severity":1,"message":"155","line":24,"column":8,"nodeType":"147","endLine":24,"endColumn":41,"suggestions":"158"},{"ruleId":"145","severity":1,"message":"159","line":35,"column":8,"nodeType":"147","endLine":35,"endColumn":10,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"155","line":39,"column":8,"nodeType":"147","endLine":39,"endColumn":42,"suggestions":"161"},{"ruleId":"145","severity":1,"message":"155","line":46,"column":8,"nodeType":"147","endLine":46,"endColumn":54,"suggestions":"162"},{"ruleId":"145","severity":1,"message":"155","line":48,"column":95,"nodeType":"147","endLine":48,"endColumn":134,"suggestions":"163"},{"ruleId":"145","severity":1,"message":"155","line":49,"column":101,"nodeType":"147","endLine":49,"endColumn":140,"suggestions":"164"},{"ruleId":"145","severity":1,"message":"155","line":50,"column":107,"nodeType":"147","endLine":50,"endColumn":146,"suggestions":"165"},{"ruleId":"141","severity":1,"message":"166","line":2,"column":9,"nodeType":"143","messageId":"144","endLine":2,"endColumn":12},{"ruleId":"141","severity":1,"message":"167","line":2,"column":14,"nodeType":"143","messageId":"144","endLine":2,"endColumn":20},{"ruleId":"141","severity":1,"message":"168","line":2,"column":22,"nodeType":"143","messageId":"144","endLine":2,"endColumn":33},{"ruleId":"151","replacedBy":"169"},{"ruleId":"153","replacedBy":"170"},{"ruleId":"145","severity":1,"message":"171","line":37,"column":8,"nodeType":"147","endLine":37,"endColumn":10,"suggestions":"172"},{"ruleId":"145","severity":1,"message":"149","line":42,"column":8,"nodeType":"147","endLine":42,"endColumn":10,"suggestions":"173"},{"ruleId":"145","severity":1,"message":"149","line":47,"column":8,"nodeType":"147","endLine":47,"endColumn":10,"suggestions":"174"},{"ruleId":"145","severity":1,"message":"149","line":52,"column":8,"nodeType":"147","endLine":52,"endColumn":10,"suggestions":"175"},{"ruleId":"145","severity":1,"message":"149","line":57,"column":8,"nodeType":"147","endLine":57,"endColumn":10,"suggestions":"176"},{"ruleId":"145","severity":1,"message":"149","line":62,"column":8,"nodeType":"147","endLine":62,"endColumn":10,"suggestions":"177"},{"ruleId":"145","severity":1,"message":"149","line":67,"column":8,"nodeType":"147","endLine":67,"endColumn":10,"suggestions":"178"},{"ruleId":"145","severity":1,"message":"149","line":72,"column":8,"nodeType":"147","endLine":72,"endColumn":10,"suggestions":"179"},{"ruleId":"141","severity":1,"message":"180","line":115,"column":6,"nodeType":"143","messageId":"144","endLine":115,"endColumn":19},{"ruleId":"151","replacedBy":"181"},{"ruleId":"153","replacedBy":"182"},{"ruleId":"151","replacedBy":"183"},{"ruleId":"153","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":49,"column":32,"nodeType":"187","endLine":49,"endColumn":49},{"ruleId":"188","severity":1,"message":"189","line":19,"column":94,"nodeType":"190","messageId":"191","endLine":19,"endColumn":96},{"ruleId":"151","replacedBy":"192"},{"ruleId":"153","replacedBy":"193"},{"ruleId":"145","severity":1,"message":"155","line":15,"column":97,"nodeType":"147","endLine":15,"endColumn":130,"suggestions":"194"},{"ruleId":"145","severity":1,"message":"155","line":20,"column":8,"nodeType":"147","endLine":20,"endColumn":41,"suggestions":"195"},{"ruleId":"145","severity":1,"message":"155","line":24,"column":8,"nodeType":"147","endLine":24,"endColumn":41,"suggestions":"196"},"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["197"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["198"],"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["201"],["202"],["203"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["204"],["205"],["206"],["207"],["208"],["209"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["199"],["200"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["210"],["211"],["212"],["213"],["214"],["215"],["216"],["217"],"'ThunkDispatch' is defined but never used.",["199"],["200"],["199"],["200"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["199"],["200"],["218"],["219"],["220"],{"desc":"221","fix":"222"},{"desc":"221","fix":"223"},"no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"224","fix":"226"},{"desc":"224","fix":"227"},{"desc":"228","fix":"229"},{"desc":"224","fix":"230"},{"desc":"224","fix":"231"},{"desc":"224","fix":"232"},{"desc":"224","fix":"233"},{"desc":"224","fix":"234"},{"desc":"235","fix":"236"},{"desc":"221","fix":"237"},{"desc":"221","fix":"238"},{"desc":"221","fix":"239"},{"desc":"221","fix":"240"},{"desc":"221","fix":"241"},{"desc":"221","fix":"242"},{"desc":"221","fix":"243"},{"desc":"224","fix":"244"},{"desc":"224","fix":"245"},{"desc":"224","fix":"246"},"Update the dependencies array to be: [dispatch]",{"range":"247","text":"248"},{"range":"249","text":"248"},"Update the dependencies array to be: [props]",{"range":"250","text":"251"},{"range":"252","text":"251"},{"range":"253","text":"251"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"254","text":"255"},{"range":"256","text":"251"},{"range":"257","text":"251"},{"range":"258","text":"251"},{"range":"259","text":"251"},{"range":"260","text":"251"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"261","text":"262"},{"range":"263","text":"248"},{"range":"264","text":"248"},{"range":"265","text":"248"},{"range":"266","text":"248"},{"range":"267","text":"248"},{"range":"268","text":"248"},{"range":"269","text":"248"},{"range":"270","text":"251"},{"range":"271","text":"251"},{"range":"272","text":"251"},[1255,1257],"[dispatch]",[1346,1348],[765,798],"[props]",[1071,1104],[1261,1294],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[1328,1330],"[demo, dispatch, isLoggedIn]",[1499,1501],[1670,1672],[1875,1877],[2088,2090],[2303,2305],[2450,2452],[2629,2631],[751,784],[1052,1085],[1238,1271]]